Please follow instructions of below files contained in Assignment2_Mengqi_Zhou folder, before reading and running code.

2. "test files" folder: this folder includes csv files that are need to develop classifiers and test.
	2.1 info.txt : information of the test fies, please read it before running code
	2.2 class_frequency.csv: frequency of each class
	2.3 feature_num_of_classes.csv: selected feature number for each class, mapped by class number 
	2.4 feature_vectors_trim.csv: binary feature vectors of all articles
	2.5 features_after_trim.csv: features for the binary feature vectors
	2.6 unique_classes.csv: array of unique class labels
	2.7 weight_feature_class.csv: weight of features for classes, mapped by class number and feature number
	2.8 binary_class_labels.csv : binary class labels mapped by dataset number and class number.
3."result" folder: this folder includes the files generated by running classification code
	3.1 "67:33" folder: results of classification with 2:1 radio of training and test dataset
		3.1.1 classified_binary_labels.csv: the classified binary class labels of test data, mapped by dataset number and class number, generated after running "classify_by_dt.py".
		3.1.2 knn_classified_sample_labels.csv: the classified binary class labels of sample of test data, mapped by dataset number and class number,generated after running "knn_classify.py". 
		3.1.3 sample_test_article_num.csv : the number of dataset chosen as sample test data, generated while running"knn_classify.py". 
		3.1.4 sample_test_vectors.csv: the feature vectors of sample test data, generated while running"knn_classify.py".
		3.1.5 sample_test_labels.csv: the binary class labels of sample test data, generated while running"knn_classify.py".
		3.1.6 sample_training_article_num.csv: he number of dataset chosen as training test data, generated while running"knn_classify.py".
		3.1.7 sample_training_labels.csv: the binary class labels of sample training data, generated while running"knn_classify.py".
		3.1.8 sample_trianing_vectors.csv: the feature vectors of sample training data, generated while running"knn_classify.py".
		3.1.9 dt_results.txt: recording modeling time  (offline cost) and classification time (online cost) of the process, and overall accuracy among all classifications, generated after running  "classify_by_dt.py".
		3.1.10 knn_results.txt:  recording modeling time  (offline cost) and classification time (online cost) of the process, and overall accuracy among all classifications, generated after running  "knn_classify.py".
	3.2 "80:20" folder: results of classification with 4:1 radio of training and test dataset
		3.2.1 classified_binary_labels.csv: the classified binary class labels of test data, mapped by dataset number and class number, generated after running "classify_by_dt.py".
		3.2.2 knn_classified_sample_labels.csv: the classified binary class labels of sample of test data, mapped by dataset number and class number,generated after running "knn_classify.py". 
		3.2.3 sample_test_article_num.csv : the number of dataset chosen as sample test data, generated while running"knn_classify.py". 
		3.2.4 sample_test_vectors.csv: the feature vectors of sample test data, generated while running"knn_classify.py".
		3.2.5 sample_test_labels.csv: the binary class labels of sample test data, generated while running"knn_classify.py".
		3.2.6 sample_training_article_num.csv: he number of dataset chosen as training test data, generated while running"knn_classify.py".
		3.2.7 sample_training_labels.csv: the binary class labels of sample training data, generated while running"knn_classify.py".
		3.2.8 sample_trianing_vectors.csv: the feature vectors of sample training data, generated while running"knn_classify.py".
		3.2.9 dt_results.txt: recording modeling time  (offline cost) and classification time (online cost) of the process, and overall accuracy among all classifications, generated after running  "classify_by_dt.py".
		3.2.10 knn_results.txt:  recording modeling time  (offline cost) and classification time (online cost) of the process, and overall accuracy among all classifications, generated after running  "knn_classify.py".
4. "source_code" folder:
	4.1 "partition" folder: contains source code to partition raw data.
		4.1.1 partition_dataset.py : a python modules contains functions to partition raw data into training and test data, not for run directly
		4.1.2 run_partition.py: source code for partition. Before running any classification code, please run it first. Before running this folder, please 1. open this file, change data_folder into the address of "test files" folder, change output_folder1 and output_folder2 that you want to save the partitioned dataset with different skew ( in this case I use 2:1 and 4:1, so the folder name should carry this information), notice output_folder 1 and output_folder2 must be different. 2. save the change. 3. in a terminal, browser into the "partition" folder, then type in "python run_partition.py". 4. hit "enter" to run the code.
	4.2 "dt" folder: contains source code to build decision tree classifier using partitioned training data and test the classifier using partitioned test data.
		4.2.1 classify_by_dt.py:  run this file to build decision tree and test it. 1. open the file, change main_folder into address of "test files" folder, change folder1 and folder2 into output_folder1 and output_folder2 that you have set in "run_partition.py". 2. save the file. 3. in a terminal, browser into the "dt" folder, then type in "python classify_by_dt.py". 4. hit "enter" to run the code. It will take about 1 hour to finish the running. And you can check result  generated in folder1 and folder2. 
		4.2.2 DecisionTree.py: this is a library contains necessary functions, not meant to run directly.
	4.3 "knn" folder:
		4.3.1 knn_classifier.py: a module containing method to build and test knn classifier, not meant to run directly.
		4.3.2 knn_classify.py:source code to run inn classification and test. 1. open the file, user main_folder, output_folder1, output_folder1 you have set in "run_partition.py" as main_folder, folder1, folder2 in this file. 2. save the change. 3. in a terminal, browser into the "inn" folder, then type in "python knn_classify.py". 4. hit "enter" to run the code. This will take roughly an hour to to finish running.
 		4.3.3 KNNClassifier.py: a module implementing inn classifier algorithm, not meant to run directly.