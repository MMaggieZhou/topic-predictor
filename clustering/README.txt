Please follow instructions of below files contained in Assignment4_Mengqi_Zhou folder, before reading and running code.

2. "test_files" folder: this folder includes csv files directedly extracted from assignment 2, that are needed to develop clustering and test.
	2.1 binary_class_labels.csv :  binary class labels mapped by dataset number and class number.
	2.2 feature_vectors.csv: binary feature vectors of all articles
	2.3 sample_feature_vectors.csv: binary feature vectors of sample 
3."result" folder: this folder includes the files generated by running classification code from "source_code" and use files from "test_files"
	3.1 "weightedVector" folder: results of classification with 2:1 radio of training and test dataset
		3.1.1 weight.csv: the array carrying weight of all features, generated after running "weight.py".
		3.1.2 weighted_sample.csv: the weighted binary vectors of sample for clustering, by multiplying weight.csv with sample_feature_vectors.csv,generated after running "weight.py". 
		3.1.3 weighted_vectors.csv : the weighted binary vectors of the whole dataset for clustering, by multiplying weight.csv with feature_vectors.csv,generated after running "weight.py". 
	3.2 "hierarchy_sample" folder: results obtained after running hierarchy clustering on "sample_feature_vectors.csv", generated by running "hierarchy.py" 
		3.2.1 "sampleclusterlabel" folder: initial results
			3.2.1.1 cosine_linkage.csv: linkage of sample vectors based on distance between centroids, generated in the middle of running"hierarchy.py" with cosine distance, used to generate class labels according to pre-set threshold.
			3.2.1.2 cosine_128.csv: cluster labels for every sample vector with cosine distance
			3.2.1.3 euclidean_linkage.csv: linkage of sample vectors based on distance between centroids, generated in the middle of running"hierarchy.py" with euclidean distance, used to generate class labels according to pre-set threshold.
			3.2.1.4 euclidean_128.csv: cluster labels for every sample vector with euclidean distance
		3.2.2 "vnoc" folder: vector number of clusters, transformed from cluster labels by running "transfer.py"
			3.2.2.1 sample_cosine_200.csv: sample vector number of 200 clusters with cosine distance
			3.2.2.2 sample_euclidean_127.csv: sample vector number of 200 clusters with euclidean distance
		3.2.3 "centroid" folder: centroid obtained from "vnoc" folder by running "transfer.py" used as seed centroids for k-means clustering
			3.2.3.1 sample_cosine_200.csv: centroids of 200 clusters ran on sample with cosine distance
			3.2.3.2 sample_euclidean_127.csv: centroids of 127 clusters ran on sample with euclidean distance
	3.3 "kmeans" folder: this folder contains results obtained by running k-means clustering on the whole dataset
		3.3.1 "centroid" folder: centroids of clustering with different number of clusters generated by merging the initial 200 or 127 clusters running"run_merge.py"
			3.3.1.1 cosine_5.csv
			3.3.1.2 cosine_8.csv
			3.3.1.3	cosine_14.csv
			3.3.1.4 cosine_32.csv
			3.3.1.5 cosine_93.csv
			3.3.1.6 cosine_125.csv
			3.3.1.7 euclidean_5.csv
			3.3.1.8	euclidean_14.csv
			3.3.1.9 euclidean_35.csv
			3.3.1.10 euclidean_60.csv
			3.3.1.11 euclidean_116.csv
			3.3.1.12 euclidean_125.csv			
		3.3.2 "nvoc" folder: number of vectors in clusters with different number of clusters generated by merging the initial 200 or 127 clusters running"run_merge.py"
			3.3.2.1 cosine_5.csv
			3.3.2.2	cosine_8.csv
			3.3.2.3 cosine_14.csv
			3.3.2.4 cosine_32.csv
			3.3.2.5 cosine_93.csv
			3.3.2.6 cosine_125.csv
			3.3.2.7 euclidean_5.csv
			3.3.2.8 euclidean_14.csv
			3.3.2.9 euclidean_35.csv
			3.3.2.10 euclidean_60.csv
			3.3.2.11 euclidean_116.csv
			3.3.2.12 euclidean_125.csv
		3.3.3 "vnoc" folder: vector numbers in clusters with different number of clusters, except for 3.3.3.12 and 3.3.3.13, all files in this folder are generated by running "run_merge.py"
			3.3.3.1 cosine_5.csv
			3.3.3.2 cosine_8.csv
			3.3.3.3	cosine_14.csv
			3.3.3.4 cosine_32.csv
			3.3.3.5 cosine_93.csv
			3.3.3.6 cosine_125.csv
			3.3.3.7 euclidean_5.csv
			3.3.3.8	euclidean_14.csv
			3.3.3.9 euclidean_35.csv
			3.3.3.10 euclidean_60.csv
			3.3.3.11 euclidean_116.csv
			3.3.3.12 euclidean_125.csv: vector numbers in 125 clusters, generated by running "run_kmeans.py" with euclidean distance
			3.3.3.13 cosine_200.csv: vector numbers in 200 clusters, generated by running "run_kmeans.py" with cosine distance
	3.4 "hierarchy" folder: this folder contains results obtained by running k-means clustering on the whole dataset
		3.4.1 "label" folder: flat array with cluster labels for every vector, with preset threshold to achieve desired number of clusters, generated by running" hierarchy.py"
			3.4.1.1 cosine_linkage.csv: linkage of vectors based on distance between centroids, generated in the middle of running"hierarchy.py" with cosine distance, used to generate class labels according to pre-set threshold.
			3.4.1.2 euclidean_linkage.csv: linkage of vectors based on distance between centroids, generated in the middle of running"hierarchy.py" with euclidean distance, used to generate class labels according to pre-set threshold.
			3.4.1.3 cosine_4.csv: cluster label of vectors with 4 clusters, using cosine distance
			3.4.1.4 cosine_8.csv: cluster label of vectors with 8 clusters, using cosine distance
			3.4.1.5 cosine_16.csv: cluster label of vectors with 16 clusters, using cosine distance
			3.4.1.6 cosine_32.csv: cluster label of vectors with 32 clusters, using cosine distance
			3.4.1.7 cosine_64.csv: cluster label of vectors with 64 clusters, using cosine distance
			3.4.1.8 cosine_128.cv: cluster label of vectors with 128 clusters, using cosine distance
			3.4.1.9 euclidean_4.csv: cluster label of vectors with 4 clusters, using euclidean distance
			3.4.1.10 euclidean_8.csv: cluster label of vectors with 8 clusters, using euclidean distance
			3.4.1.11 euclidean_16.csv: cluster label of vectors with 16 clusters, using euclidean distance
			3.4.1.12 euclidean_32.csv: cluster label of vectors with 32 clusters, using euclidean distance
			3.4.1.13 euclidean_64.csv: cluster label of vectors with 64 clusters, using euclidean distance
			3.4.1.14 euclidean_128.csv: cluster label of vectors with 125 clusters, using euclidean distance
		3.4.2 "nvoc" folder: number of vector in clusters generated by running"transfer.py" on files in "label" folder
			3.4.2.1 cosine_4.csv: number of vector of 4 clusters, using cosine distance
			3.4.2.2	cosine_8.csv: number of vector of 8 clusters, using cosine distance
			3.4.2.3 cosine_14.csv: number of vector of 14 clusters, using cosine distance
			3.4.2.4 cosine_32.csv: number of vector of 32 clusters, using cosine distance
			3.4.2.5 cosine_93.csv: number of vector of 93 clusters, using cosine distance
			3.4.2.6 cosine_125.csv: number of vector of 125 clusters, using cosine distance
			3.4.2.7 euclidean_4.csv: number of vector of 4 clusters, using euclidean distance
			3.4.2.8 euclidean_8.csv: number of vector of 8 clusters, using euclidean distance
			3.4.2.9 euclidean_16.csv:number of vector of 16 clusters, using euclidean distance
			3.4.2.10 euclidean_31.csv: number of vector of 31 clusters, using euclidean distance
			3.4.2.11 euclidean_116.csv: number of vector of 116 clusters, using euclidean distance
			3.4.2.12 euclidean_128.csv: number of vector of 128 clusters, using euclidean distance
		3.4.3 "vnoc" folder: vector numbers in clusters generated by running"transfer.py" on files in "label" folder
			3.4.3.1 cosine_4.csv
			3.4.3.2	cosine_8.csv
			3.4.3.3 cosine_14.csv
			3.4.3.4 cosine_32.csv
			3.4.3.5 cosine_93.csv
			3.4.3.6 cosine_125.csv
			3.4.3.7 euclidean_4.csv
			3.4.3.8 euclidean_8.csv
			3.4.3.9 euclidean_16.csv
			3.4.3.10 euclidean_31.csv
			3.4.3.11 euclidean_116.csv
			3.4.3.12 euclidean_128.csv
	3.5 "summary" folder: this folder carrys useful information to summarize the overall performance of clustering methods with different distance metric
		3.5.1 time.txt: total clustering time for hierarchy clusterin and k-means clustering with both cosine and euclidean similarity or distance
		3.5.2 entropy.txt: entropy of clustering with various number of clusters for hierarchy clusterin and k-means clustering with both cosine and euclidean similarity or distance, based on binary class labels, generated by running "run_entropy.py"
		3.5.3 standardDeviation.txt: entropy of clustering with various number of clusters for hierarchy clusterin and k-means clustering with both cosine and euclidean similarity or distance, based on binary class labels, generated by running "standarddeviation.py"
4. "source_code" folder: this folder contains source code written in python to do the clustering work. 
***important***: python newer than or equal to version2.7, scipy library, and numpy library are required before running all code.
***important***: the code need to run in sequence otherwise won't work
***important***: before running the code, make sure the the file address in the code corresponds to the file address on your hardware.
	4.1 weight.py: source code for finding weight of features and generate weighted vector for sample and whole dataset
	4.2 hierarchy.py: source code for generating cluster labels for vectors by hierarchy clustering 
	4.3 transfer.py: source code to generate seed centroid for k-means, to generate vnoc, from cluster labels
	4.4 kmeans.py: module contains functions for k-means clustering, will be called by run_kmeans.py, not to run directly
	4.5 run_kmeans.py: source code for clustering vectors by k-means, with seed centroid
	4.6 merge.py: module contains functions for merging clusters, just for k-means so far, not to run directly
	4.7 run_merge.py: source code to merge clusters based on distance of their centroids
	4.8 entropy.py: module contains functions for calculating entropy of clustering, regardless of methods or metric, not to run directly
	4.9 run_entropy.py: source code to calculate entropy of clusterings
	4.10 standarddeviation.py: source code to calculate standard deviation (skew) of clusterings
	4.11 cosine.py: module contains function to calculate cosine similarity of two vectors
	4.12 euclidean.py: modules contains function to calculate euclidean similarity based on euclidean distance of two vectors
